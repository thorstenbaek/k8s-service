---
# Source: Experimental/charts/k8s-service/templates/service.yaml
apiVersion: v1
kind: Service
metadata:
  name: test-k8s-service
  labels:
    helm.sh/chart: k8s-service-0.1.0
    app.kubernetes.io/name: k8s-service
spec:
  type: ClusterIP
  ports:
    - port: 80
      targetPort: http
      protocol: TCP
      name: http
  selector:
    app.kubernetes.io/name: k8s-service
---
# Source: Experimental/charts/k8s-service/templates/deployment.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: test-k8s-service
  labels:
    helm.sh/chart: k8s-service-0.1.0
    app.kubernetes.io/name: k8s-service
spec:
  replicas: 1
  selector:
    matchLabels:
      app.kubernetes.io/name: k8s-service
  template:
    metadata:
      labels:
        app.kubernetes.io/name: k8s-service
    spec:
      serviceAccountName: default
      securityContext:
        {}
      containers:
        - name: k8s-service
          securityContext:
            {}
          image: "thorstenbaek/k8s-service:v1.0.0.19"
          imagePullPolicy: Always
          env:
            - name: TARGET_DOMAIN
              value: api.dips.no
            - name: IsolatedManifestTemplateURL
              value: https://raw.githubusercontent.com/thorstenbaek/k8sSandBox/master/helm/SandBox/sandboxWithDb.release.yaml
            - name: ManifestTemplateURL
              value: https://raw.githubusercontent.com/thorstenbaek/k8sSandBox/master/helm/SandBox/sandbox.release.yaml
          ports:
            - name: http
              containerPort: 80
              protocol: TCP
          # livenessProbe:
          #   httpGet:
          #     path: /health
          #     port: http
          # readinessProbe:
          #   httpGet:
          #     path: /health
          #     port: http
          resources:
            {}
---
# Source: Experimental/charts/k8s-service/templates/ingress.yaml
apiVersion: networking.k8s.io/v1beta1
kind: Ingress
metadata:
  name: test-k8s-service  
  labels:
    app.kubernetes.io/name: test-k8s-service
  annotations:
    cert-manager.io/cluster-issuer: letsencrypt
    kubernetes.io/ingress.class: nginx
    nginx.ingress.kubernetes.io/force-ssl-redirect: "true"
spec:
  tls:
    - hosts:
        - "k8s-service-test.api.dips.no"
      secretName: k8s-service-experimental-tls
  rules:
    - host: "k8s-service-test.api.dips.no"
      http:
        paths:
          - path: /
            backend:
              serviceName: test-k8s-service
              servicePort: 80